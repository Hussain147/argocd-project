parameters {
    string(name: 'ECR_REPOSITORY', defaultValue: '', description: 'Name of the ECR repository')
}
def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]
pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="432624721970"
        AWS_DEFAULT_REGION="us-east-1"
       // IMAGE_REPO_NAME="jala-ecr-repo"
        BUILD_NUMBER = "${currentBuild.number}"
        dockerImageVersion = "v${BUILD_NUMBER}"
        
        
        
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    }
    tools {
        // Define the Maven tool installation
        maven 'maven'
    }
    stages {
        
        stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/Hussain147/argocd-project.git/']]])     
            }
        }
        
        stage('Build Artifact') {
            steps {
                sh 'ls -ltr'
                // build the project and create a JAR file
                sh 'cd spring-boot-app && mvn clean package'
            }
            post {
                success {
                    echo "Now Archiving."
                    archiveArtifacts artifacts: '*/.jar'
                }
            }
        }
        
        stage('Test'){
            steps {
                sh 'cd spring-boot-app && mvn test'
            }

        }
        
        stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'cd spring-boot-app && mvn checkstyle:checkstyle -DskipTests'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }
        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
            }

            steps {
              withSonarQubeEnv('sonar') {
                  sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=techie \
                  -Dsonar.projectName=techie-web \
                  -Dsonar.projectVersion=1.0 \
                  -Dsonar.sources=spring-boot-app/src/ \
                  -Dsonar.java.binaries=spring-boot-app/target/classes/com/hussain/ \
                  -Dsonar.junit.reportsPath=spring-boot-app/target/surefire-reports/ \
                  -Dsonar.jacoco.reportsPath=spring-boot-app/target/jacoco.exec \
                  -Dsonar.java.checkstyle.reportPaths=spring-boot-app/target/checkstyle-result.xml'''
                    }
                }
        }
        

        stage('Upload Artifact To Nexus'){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: '172.31.28.95:8081',
                  groupId: 'Dev',
                  version: "v${env.BUILD_ID}",
                  repository: 'techie-repo',
                  credentialsId: 'nexus_login',
                  artifacts: [
                    [artifactId: 'techie-web',
                     classifier: '',
                     file: 'spring-boot-app/target/spring-boot-web.jar',
                     type: 'jar']
                ]
            )
            }
        }
        
        
        stage('Logging into AWS ECR') {
            steps {
                script {
                sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }
                 
            }
         }
         
        stage('Check ECR Repository Existence') {
            steps {
                script {
                    def awsRegion = 'us-east-1'
                    def ecrRepository = params.ECR_REPOSITORY

                    def ecrRepositoryExists = sh(
                        script: "aws ecr describe-repositories --repository-names $ecrRepository --region $awsRegion",
                        returnStatus: true
                    )

                    if (ecrRepositoryExists == 0) {
                        echo "ECR Repository $ecrRepository already exists. Skipping ECR repository creation."
                        currentBuild.result = 'SUCCESS'  // Mark the build as successful
                }
            }
        }
    }
    
        stage('Create ECR Repository') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('FAILURE') && !params.ECR_REPOSITORY.isEmpty() }  // Skip if the previous stage marked the build as SUCCESS or if ECR_REPOSITORY is empty
            }
            steps {
                script {
                    def awsRegion = 'us-east-1'
                    def ecrRepository = params.ECR_REPOSITORY

                    // Check if the repository already exists
                    def repoExists = sh(script: "aws ecr describe-repositories --repository-names $ecrRepository --region $awsRegion", returnStatus: true) == 0

                    if (!repoExists) {
                        echo "ECR Repository $ecrRepository does not exist. Creating it..."
                        // Create ECR repository using AWS CLI
                        def createResult = sh(script: "aws ecr create-repository --repository-name $ecrRepository --region $awsRegion", returnStatus: true)

                        if (createResult == 0) {
                            echo "ECR Repository $ecrRepository created successfully."
                        } else {
                            error "Failed to create ECR Repository $ecrRepository."
                        }
                        } else {
                            echo "ECR Repository $ecrRepository already exists. Skipping ECR repository creation."
                        }
                    }
                }
        }
  
        stage('Building image') {

            steps{
                script {
                    sh "pwd"
                    sh "cd spring-boot-app && pwd"
                    sh "ls -ltr"
                    def ecrRepository = params.ECR_REPOSITORY
            // Build and tag the Docker image
                    sh "docker build -t $ecrRepository:$dockerImageVersion . -f /var/lib/jenkins/workspace/techie-cicd/spring-boot-app/Dockerfile"
                }
            }
        }
   
    // Uploading Docker images into AWS ECR
        stage('Pushing to ECR') {
            steps{  
                script {
                    def ecrRepository = params.ECR_REPOSITORY
                   
                    sh "docker tag $ecrRepository:$dockerImageVersion ${REPOSITORY_URI}/$ecrRepository:${dockerImageVersion}"
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$ecrRepository:${dockerImageVersion}"
                }
            }
        }
        
        stage('GitOps Enabler to update deployment manifest') {
            environment {
                GIT_REPO_NAME = "argocd-project"
                GIT_USER_NAME = "hussain147"
                GIT_USER_EMAIL = "hussainashrafi406@gmail.com"

            
        }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    script {

                // Specify the target directory for the clone
                        def cloneDirectory = "argocd-project"

                // Remove the existing directory if it exists
                        sh "rm -rf ${cloneDirectory}"

                // Clone the repository
                        sh "git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} ${cloneDirectory}"
                        dir("${cloneDirectory}/spring-boot-app-manifests") {
                    // Fetch the current Deployment YAML
                            sh "wget https://raw.githubusercontent.com/${GIT_USER_NAME}/${GIT_REPO_NAME}/main/spring-boot-app-manifests/deployment.yml"

                    // Modify the image tag in the Deployment YAML
                            sh "sed -i 's|image: 432624721970.dkr.ecr.us-east-1.amazonaws.com/techie:.*|image: 432624721970.dkr.ecr.us-east-1.amazonaws.com/techie:${dockerImageVersion}|g' deployment.yml"

                    // Add, commit, and push the changes
                            sh "git add deployment.yml"
                            sh "git commit -m 'Updated deployment image to version ${dockerImageVersion}'"
                            sh "git push origin main"
                }
            }
        }
    }
    }
        stage('Send jenkins Logs to S3') {
            steps {
                script {
                    def bucketName = 'techie-jenkins-logs'
                    def s3Folder = 'logs' // You can specify a subfolder in the S3 bucket if needed
                    
                
                    // Upload the captured console log to S3
                    sh "aws s3 cp /var/lib/jenkins/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}/log s3://${bucketName}/${s3Folder}/${env.BUILD_NUMBER}/log"
            
        }
    }
}

    }
    post('Slack Notification') {
        always {
            echo 'Sending Slack Notifications.'
            slackSend channel: '#techie-cicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
            }
        }
}
